load("tp2.RData")
load("tp2.RData")
head(clima_ecobici)
View(fake_news)
install.packages("ggplot2")
library(ggplot2)
# Crear un gráfico de dispersión con ggplot
ggplot(fake_news, aes(x = negative, y = title_words, color = title_has_excl)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Tiene signos de exclamación en el título") +
ggtitle("Relación entre title_has_excl, negative y title_words")
install.packages("ggplot2")
library(ggplot2)
# Crear un gráfico de dispersión con ggplot
ggplot(fake_news, aes(x = negative, y = title_words, color = title_has_excl)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Tiene signos de exclamación en el título") +
ggtitle("Relación entre title_has_excl, negative y title_words")
# Crear un gráfico de dispersión con ggplot
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Se trata de una fake new") +
ggtitle("Relación entre title_has_excl, negative y title_words")
# Crear un gráfico de dispersión con ggplot
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Se trata de una fake news") +
ggtitle("Relación entre title_has_excl, negative y title_words")
library(ggplot2)
ggplot(fake_news, aes(x = title_has_excl, fill = type)) +
geom_bar(position = "dodge") +
labs(title = "Distribución de type por título con signos de exclamación",
x = "Título con signos de exclamación",
y = "Frecuencia") +
scale_fill_manual(values = c("real" = "blue", "fake" = "red"))
ggplot(fake_news, aes(x = type, y = title_words, fill = type)) +
geom_boxplot() +
labs(title = "Distribución de title_words por type",
x = "Tipo de noticia",
y = "Número de palabras en el título") +
scale_fill_manual(values = c("real" = "blue", "fake" = "red"))
library(ggplot2)
ggplot(fake_news, aes(x = title_has_excl, y = negative, color = type)) +
geom_point() +
labs(title = "Relación entre title_has_excl y negative por type",
x = "Título con signos de exclamación",
y = "Porcentaje de connotaciones negativas") +
scale_color_manual(values = c("real" = "blue", "fake" = "red"))
# Crear un gráfico de dispersión para "title_has_excl" vs "negative" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = negative, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Porcentaje de connotaciones negativas") +
ggtitle("Gráfico de dispersión: title_has_excl vs negative por tipo de noticia")
# Crear un gráfico de dispersión para "title_has_excl" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = title_words, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: title_has_excl vs title_words por tipo de noticia")
# Crear un gráfico de dispersión para "negative" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de connotaciones negativas", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: negative vs title_words por tipo de noticia")
# Crear un gráfico de dispersión para "title_has_excl" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = title_words, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: title_has_excl vs title_words por tipo de noticia")
# Crear un gráfico de dispersión para "title_has_excl" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = title_words, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: title_has_excl vs title_words por tipo de noticia")
# Crear un gráfico de dispersión con ggplot
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Se trata de una fake news") +
ggtitle("Relación entre title_has_excl, negative y title_words")
# gráfico de dispersión para "negative" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de connotaciones negativas", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: negative vs title_words por tipo de noticia")
# Crear un gráfico de dispersión con ggplot
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Se trata de una fake news") +
ggtitle("Relación entre title_has_excl, negative y title_words")
# gráfico de dispersión para "negative" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de connotaciones negativas", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: negative vs title_words por tipo de noticia")
# Crear un gráfico de dispersión con ggplot
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Tipo") +
ggtitle("Relación entre title_has_excl, negative y title_words")
# gráfico de dispersión "porc palabras negativas" vs "numero de palabras en el titulo"
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Tipo") +
ggtitle("Relación entre title_has_excl, negative y title_words")
# gráfico de dispersión para "title_has_excl" vs "negative" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = negative, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Porcentaje de connotaciones negativas") +
ggtitle("Gráfico de dispersión: title_has_excl vs negative por tipo de noticia")
# gráfico de dispersión para "title_has_excl" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = title_words, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: title_has_excl vs title_words por tipo de noticia")
# gráfico de dispersión para "title_has_excl" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = title_words, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: title_has_excl vs title_words por tipo de noticia")
# gráfico de dispersión para "title_has_excl" vs "negative" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = negative, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Porcentaje de connotaciones negativas") +
ggtitle("Gráfico de dispersión: title_has_excl vs negative por tipo de noticia")
install.packages("ggplot2")
install.packages("rpart")
library(ggplot2)
library(rpart)
install.packages("ggplot2")
# - Decision Tree -
# Establecemos una semilla para la reproducibilidad
set.seed(123)
# Creamos un vector de índices para el conjunto de entrenamiento
n_train <- sample(1:nrow(fake_news), replace = FALSE, 0.8 * nrow(fake_news))
# Creamos los conjuntos de entrenamiento y prueba
train_data <- fake_news[n_train, ]
test_data <- fake_news[-n_train, ]
# Construimos el clasificador de árbol de decisión
tree_model <- rpart(type ~ title_has_excl + negative + title_words, data = train_data)
# Predecimos las clases en el conjunto de prueba
tree_predictions <- predict(tree_model, test_data, type = "class")
# Calculamos la matriz de confusión
confusion_matrix_tree <- table(Real = test_data$type, Predicho = tree_predictions)
# Calculamos la precisión del modelo
accuracy_tree <- sum(diag(confusion_matrix_tree)) / sum(confusion_matrix_tree)
# Construimos el clasificador de árbol de decisión
tree_model1 <- rpart(type ~ title_has_excl + negative + title_words, data = train_data)
# Predecimos las clases en el conjunto de prueba
tree_predictions <- predict(tree_model1, test_data, type = "class")
# Calculamos la matriz de confusión
confusion_matrix_tree <- table(Real = test_data$type, Predicho = tree_predictions)
library(ggplot2)
library(rpart)
train_data <- fake_news[n_train, ]
test_data <- fake_news[-n_train, ]
View(fake_news)
View(train_data)
View(test_data)
sum(test_data$title %in% train_data$title)
ggplot(fake_news, aes(x = negative, y = title_words, color = type)) +
geom_point() +
labs(x = "Porcentaje de palabras negativas",
y = "Número de palabras en el título",
color = "Tipo") +
ggtitle("Relación entre title_has_excl, negative y title_words")
ggplot(fake_news, aes(x = title_has_excl, y = negative, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Porcentaje de connotaciones negativas") +
ggtitle("Gráfico de dispersión: title_has_excl vs negative por tipo de noticia")
ggplot(fake_news, aes(x = title_has_excl, y = title_words, color = type)) +
geom_point() +
labs(x = "Título con exclamación", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: title_has_excl vs title_words por tipo de noticia")
# gráfico de dispersión para "title_has_excl" vs "title_words" respecto a "type"
ggplot(fake_news, aes(x = title_has_excl, y = title_words, color = type)) +
geom_col() +
labs(x = "Título con exclamación", y = "Número de palabras en el título") +
ggtitle("Gráfico de dispersión: title_has_excl vs title_words por tipo de noticia")
?rpart
View(clima_ecobici)
lubridate::wday(clima_ecobici$fecha)
weekdays(clima_ecobici$fecha)
clima_ecobici %>%
mutate(
dia_semana = weekdays(fecha)
)
clima_ecobici %>%
mutate(
dia_semana = weekdays(fecha)
)
require(tidyverse)
require(tidyverse)
clima_ecobici %>%
mutate(
dia_semana = weekdays(fecha)
)
require(tidyverse)
clima_ecobici %>%
mutate(
dia_semana = weekdays(date)
)
clima_ecobici %>%
mutate(
dia_semana = weekdays(date)
dia_laborable = if_else(dia_semana == "sábado" | dia_semana == "domingo", T, F)
require(tidyverse)
clima_ecobici %>%
mutate(
dia_semana = weekdays(date),
dia_laborable = if_else(dia_semana == "sábado" | dia_semana == "domingo", T, F)
)
require(tidyverse)
#preparo el dataset
df = clima_ecobici %>%
mutate(
dia_semana = weekdays(date),
dia_laborable = if_else(dia_semana == "sábado" | dia_semana == "domingo", T, F)
)
require(Metrics)
Metrics
require(tidyverse)
require(Metrics)
#preparo el dataset
df = clima_ecobici %>%
mutate(
dia_semana = weekdays(date),
dia_laborable = if_else(dia_semana == "sábado" | dia_semana == "domingo", T, F)
)
?rmse
require(tidyverse)
require(Metrics)
install.packages("metrics")
install.packages("Metrics")
require(tidyverse)
require(Metrics)
#preparo el dataset
df = clima_ecobici %>%
mutate(
dia_semana = weekdays(date),
dia_laborable = if_else(dia_semana == "sábado" | dia_semana == "domingo", T, F)
)
?rmse
?r2
?Metrics
r2 = function(y_actual,y_predict){
return(cor(y_actual,y_predict)^2)
}
eval_formula = function(nombre_modelo, formula, x_train, x_test, y_train, y_test){
modelo = lm({{formula}}, data = x_train)
train_preds = predict(modelo, x_train)
test_preds = predict(modelo, x_test)
return(
data.frame(
nombre_modelo = nombre_modelo,
formula = formula,
train_RMSE = rmse(y_train, train_preds),
train_r2 = r2(y_train, train_preds),
test_RMSE = rmse(y_test, test_preds),
test_r2 = r2(y_test, test_preds)
)
)
}
eval_formula("test","n ~ prcp + dia_laborable", df, df, df$n, df$n)
eval_formula("test","n ~ prcp * tmax + dia_laborable", df, df, df$n, df$n)
eval_formula("test","n ~ prcp * tmax + dia_laborable * prcp", df, df, df$n, df$n)
eval_formula("test","n ~ dia_laborable * prcp", df, df, df$n, df$n)
eval_formula("test","n ~ dia_laborable - prcp * tmax", df, df, df$n, df$n)
eval_formula("test","n ~ dia_laborable * prcp * tmax", df, df, df$n, df$n)
eval_formula("test","n ~ dia_laborable * prcp *+tmax", df, df, df$n, df$n)
eval_formula("test","n ~ dia_laborable * prcp +tmax", df, df, df$n, df$n)
eval_formula("test","n ~ dia_laborable + prcp * tavg", df, df, df$n, df$n)
eval_formula("test","n ~ dia_laborable + prcp * pres", df, df, df$n, df$n)
