test_r2 = r2(y_test, test_preds)
)
)
}
#retorna un dataframe con los nombres de las columnas a usar normalizados
#asi no escribimos tanto
preprocess_df = function(df, target, colum_1, colum_2){
return(
df %>%
# tube q poner el all_of pq me tiraba warnings
select(all_of({{target}}), all_of({{colum_1}}), all_of({{colum_2}})) %>%
rename(
"y"=target,
"col_1"=colum_1,
"col_2"=colum_2)
)
}
#creo la lista de formulas
formulas = c(
"y ~ col_1", #caso mas simples
"y ~ col_2",
"y ~ col_1 + col_2",  #combinaciones
"y ~ col_1 * col_2",
"y ~ col_1 * col_2 + col_1",
"y ~ col_1 * col_2 + col_2",
"y ~ col_1 * col_2 + col_1 + col_2"
)
#Creo la funcion que engloba todo
probar_experimento = function(nombre, seed, target, x1, x2,df){
data = preprocess_df(df, target, x1, x2)
set.seed(seed)
print('split start')
#train test split
data$index = 1:length(data$y)
train = data %>% sample_frac(0.8)
test = data %>% anti_join(train, by="index")
print('split done')
# guardo los resultados en una tabla
res = data.frame(
nombre_exp = NA,
formula = NA,
train_RMSE = NA,
train_r2 = NA,
test_RMSE = NA,
test_r2 = NA,
seed = NA
) %>% filter(!is.na(seed))
#pruebo cada forumula
for(formula in formulas){
exp_res = eval_formula(
nombre, formula,
train%>%select(col_1, col_2),
test%>%select(col_1, col_2),
train$y,
test$y
)
print(exp_res)
exp_res$seed = seed
res = rbind(res, exp_res)
}
#devuelvo los resultados
return(res)
}
probar_experimento("test",42, "n", "dia_laborable","llovio", df)
r2 = function(y_actual,y_predict){
return(cor(y_actual,y_predict)^2)
}
#retorna los resultados del modelo
eval_formula = function(nombre_modelo, formula, x_train, x_test, y_train, y_test){
modelo = lm({{formula}}, data = x_train)
train_preds = predict(modelo, x_train)
test_preds = predict(modelo, x_test)
print(test_preds)
return(
data.frame(
nombre_exp = nombre_modelo,
formula = formula,
train_RMSE = rmse(y_train, train_preds),
train_r2 = r2(y_train, train_preds),
test_RMSE = rmse(y_test, test_preds),
test_r2 = r2(y_test, test_preds)
)
)
}
#retorna un dataframe con los nombres de las columnas a usar normalizados
#asi no escribimos tanto
preprocess_df = function(df, target, colum_1, colum_2){
return(
df %>%
# tube q poner el all_of pq me tiraba warnings
select(all_of({{target}}), all_of({{colum_1}}), all_of({{colum_2}})) %>%
rename(
"y"=target,
"col_1"=colum_1,
"col_2"=colum_2)
)
}
#creo la lista de formulas
formulas = c(
"y ~ col_1", #caso mas simples
"y ~ col_2",
"y ~ col_1 + col_2",  #combinaciones
"y ~ col_1 * col_2",
"y ~ col_1 * col_2 + col_1",
"y ~ col_1 * col_2 + col_2",
"y ~ col_1 * col_2 + col_1 + col_2"
)
#Creo la funcion que engloba todo
probar_experimento = function(nombre, seed, target, x1, x2,df){
data = preprocess_df(df, target, x1, x2)
set.seed(seed)
print('split start')
#train test split
data$index = 1:length(data$y)
train = data %>% sample_frac(0.8)
test = data %>% anti_join(train, by="index")
print('split done')
# guardo los resultados en una tabla
res = data.frame(
nombre_exp = NA,
formula = NA,
train_RMSE = NA,
train_r2 = NA,
test_RMSE = NA,
test_r2 = NA,
seed = NA
) %>% filter(!is.na(seed))
#pruebo cada forumula
for(formula in formulas){
exp_res = eval_formula(
nombre, formula,
train%>%select(col_1, col_2),
test%>%select(col_1, col_2),
train$y,
test$y
)
exp_res$seed = seed
res = rbind(res, exp_res)
}
#devuelvo los resultados
return(res)
}
probar_experimento("test",42, "n", "dia_laborable","llovio", df)
probar_experimento("test",42, "n", "dia_laborable","llovio", df)
test
r2 = function(y_actual,y_predict){
return(cor(y_actual,y_predict)^2)
}
#retorna los resultados del modelo
eval_formula = function(nombre_modelo, formula, x_train, x_test, y_train, y_test){
modelo = lm({{formula}}, data = x_train)
train_preds = predict(modelo, x_train)
test_preds = predict(modelo, x_test)
return(
data.frame(
nombre_exp = nombre_modelo,
formula = formula,
train_RMSE = rmse(y_train, train_preds),
train_r2 = r2(y_train, train_preds),
test_RMSE = rmse(y_test, test_preds),
test_r2 = r2(y_test, test_preds)
)
)
}
#retorna un dataframe con los nombres de las columnas a usar normalizados
#asi no escribimos tanto
preprocess_df = function(df, target, colum_1, colum_2){
return(
df %>%
# tube q poner el all_of pq me tiraba warnings
select(all_of({{target}}), all_of({{colum_1}}), all_of({{colum_2}})) %>%
rename(
"y"=target,
"col_1"=colum_1,
"col_2"=colum_2)
)
}
#creo la lista de formulas
formulas = c(
"y ~ col_1", #caso mas simples
"y ~ col_2",
"y ~ col_1 + col_2",  #combinaciones
"y ~ col_1 * col_2",
"y ~ col_1 * col_2 + col_1",
"y ~ col_1 * col_2 + col_2",
"y ~ col_1 * col_2 + col_1 + col_2"
)
#Creo la funcion que engloba todo
probar_experimento = function(nombre, seed, target, x1, x2,df){
data = preprocess_df(df, target, x1, x2)
set.seed(seed)
print('split start')
#train test split
data$index = 1:length(data$y)
train = data %>% sample_frac(0.8)
test = data %>% anti_join(train, by="index")
print('split done')
print(test)
# guardo los resultados en una tabla
res = data.frame(
nombre_exp = NA,
formula = NA,
train_RMSE = NA,
train_r2 = NA,
test_RMSE = NA,
test_r2 = NA,
seed = NA
) %>% filter(!is.na(seed))
#pruebo cada forumula
for(formula in formulas){
exp_res = eval_formula(
nombre, formula,
train%>%select(col_1, col_2),
test%>%select(col_1, col_2),
train$y,
test$y
)
exp_res$seed = seed
res = rbind(res, exp_res)
}
#devuelvo los resultados
return(res)
}
probar_experimento("test",42, "n", "dia_laborable","llovio", df)
r2 = function(y_actual,y_predict){
return(cor(y_actual,y_predict)^2)
}
#retorna los resultados del modelo
eval_formula = function(nombre_modelo, formula, x_train, x_test, y_train, y_test){
modelo = lm({{formula}}, data = x_train)
train_preds = predict(modelo, x_train)
test_preds = predict(modelo, x_test)
return(
data.frame(
nombre_exp = nombre_modelo,
formula = formula,
train_RMSE = rmse(y_train, train_preds),
train_r2 = r2(y_train, train_preds),
test_RMSE = rmse(y_test, test_preds),
test_r2 = r2(y_test, test_preds)
)
)
}
#retorna un dataframe con los nombres de las columnas a usar normalizados
#asi no escribimos tanto
preprocess_df = function(df, target, colum_1, colum_2){
return(
df %>%
# tube q poner el all_of pq me tiraba warnings
select(all_of({{target}}), all_of({{colum_1}}), all_of({{colum_2}})) %>%
rename(
"y"=target,
"col_1"=colum_1,
"col_2"=colum_2)
)
}
#creo la lista de formulas
formulas = c(
"y ~ col_1", #caso mas simples
"y ~ col_2",
"y ~ col_1 + col_2",  #combinaciones
"y ~ col_1 * col_2",
"y ~ col_1 * col_2 + col_1",
"y ~ col_1 * col_2 + col_2",
"y ~ col_1 * col_2 + col_1 + col_2"
)
#Creo la funcion que engloba todo
probar_experimento = function(nombre, seed, target, x1, x2,df){
data = preprocess_df(df, target, x1, x2)
set.seed(seed)
print('split start')
#train test split
data$index = 1:length(data$y)
train = data %>% sample_frac(0.8)
test = data %>% anti_join(train, by="index")
print('split done')
print(test)
# guardo los resultados en una tabla
res = data.frame(
nombre_exp = NA,
formula = NA,
train_RMSE = NA,
train_r2 = NA,
test_RMSE = NA,
test_r2 = NA,
seed = NA
) %>% filter(!is.na(seed))
#pruebo cada forumula
for(formula in formulas){
exp_res = eval_formula(
nombre, formula,
train,
test,
train$y,
test$y
)
exp_res$seed = seed
res = rbind(res, exp_res)
}
#devuelvo los resultados
return(res)
}
probar_experimento("test",42, "n", "dia_laborable","llovio", df)
r2 = function(y_actual,y_predict){
return(cor(y_actual,y_predict)^2)
}
#retorna los resultados del modelo
eval_formula = function(nombre_modelo, formula, x_train, x_test, y_train, y_test){
modelo = lm({{formula}}, data = x_train)
train_preds = predict(modelo, x_train)
test_preds = predict(modelo, x_test)
return(
data.frame(
nombre_exp = nombre_modelo,
formula = formula,
train_RMSE = rmse(y_train, train_preds),
train_r2 = r2(y_train, train_preds),
test_RMSE = rmse(y_test, test_preds),
test_r2 = r2(y_test, test_preds)
)
)
}
#retorna un dataframe con los nombres de las columnas a usar normalizados
#asi no escribimos tanto
preprocess_df = function(df, target, colum_1, colum_2){
return(
df %>%
# tube q poner el all_of pq me tiraba warnings
select(all_of({{target}}), all_of({{colum_1}}), all_of({{colum_2}})) %>%
rename(
"y"=target,
"col_1"=colum_1,
"col_2"=colum_2)
)
}
#creo la lista de formulas
formulas = c(
"y ~ col_1", #caso mas simples
"y ~ col_2",
"y ~ col_1 + col_2",  #combinaciones
"y ~ col_1 * col_2",
"y ~ col_1 * col_2 + col_1",
"y ~ col_1 * col_2 + col_2",
"y ~ col_1 * col_2 + col_1 + col_2"
)
#Creo la funcion que engloba todo
probar_experimento = function(nombre, seed, target, x1, x2,df){
data = preprocess_df(df, target, x1, x2)
set.seed(seed)
#train test split
data$index = 1:length(data$y)
train = data %>% sample_frac(0.8)
test = data %>% anti_join(train, by="index")
# guardo los resultados en una tabla
res = data.frame(
nombre_exp = NA,
formula = NA,
train_RMSE = NA,
train_r2 = NA,
test_RMSE = NA,
test_r2 = NA,
seed = NA
) %>% filter(!is.na(seed))
#pruebo cada forumula
for(formula in formulas){
exp_res = eval_formula(
nombre, formula,
train,
test,
train$y,
test$y
)
exp_res$seed = seed
res = rbind(res, exp_res)
}
#devuelvo los resultados
return(res)
}
View(df)
resultados = data.frame(
nombre_exp = NA,
formula = NA,
train_RMSE = NA,
train_r2 = NA,
test_RMSE = NA,
test_r2 = NA,
seed = NA
) %>% filter(!is.na(seed))
seed_ = 42
resultados = rbind(resultados, probar_experimento(
"Dia laborable Presion",
seed_, "n", "dia_laborable", "pres", df))
resultados = rbind(resultados, probar_experimento(
"Dia laborable pptacion",
seed_, "n", "dia_laborable", "prcp", df))
resultados = rbind(resultados, probar_experimento(
"Dia laborable llueve o no",
seed_, "n", "dia_laborable", "llovio", df))
resultados = rbind(resultados, probar_experimento(
"Dia laborable lluvia binned",
seed_, "n", "dia_laborable", "lluvias_binned", df))
View(resultados)
kable(resultados)
resultados %>% arrange(-test_r2)
kable(resultados %>% arrange(-test_r2))
r2 = function(y_actual,y_predict){
return(cor(y_actual,y_predict)^2)
}
#retorna los resultados del modelo
eval_formula = function(nombre_modelo, formula, x_train, x_test, y_train, y_test){
modelo = lm({{formula}}, data = x_train)
train_preds = predict(modelo, x_train)
test_preds = predict(modelo, x_test)
return(
data.frame(
nombre_exp = nombre_modelo,
formula = formula,
train_RMSE = rmse(y_train, train_preds),
train_r2 = r2(y_train, train_preds),
test_RMSE = rmse(y_test, test_preds),
test_r2 = r2(y_test, test_preds)
)
)
}
#retorna un dataframe con los nombres de las columnas a usar normalizados
#asi no escribimos tanto
preprocess_df = function(df, target, colum_1, colum_2){
return(
df %>%
# tube q poner el all_of pq me tiraba warnings
select(all_of({{target}}), all_of({{colum_1}}), all_of({{colum_2}})) %>%
rename(
"y"=target,
"col_1"=colum_1,
"col_2"=colum_2)
)
}
#creo la lista de formulas
formulas = c(
"y ~ col_1", #caso mas simples
"y ~ col_2",
"y ~ col_1 + col_2",  #combinaciones
"y ~ col_1 * col_2",
"y ~ col_1 * col_2 + col_1",
"y ~ col_1 * col_2 + col_2",
"y ~ col_1 * col_2 + col_1 + col_2"
)
#Creo la funcion que engloba todo
probar_experimento = function(nombre, seed, target, x1, x2,df){
data = preprocess_df(df, target, x1, x2)
set.seed(seed)
#train test split
data$index = 1:length(data$y)
train = data %>% sample_frac(0.8)
test = data %>% anti_join(train, by="index")
# guardo los resultados en una tabla
res = data.frame(
nombre_exp = NA,
formula = NA,
train_RMSE = NA,
train_r2 = NA,
test_RMSE = NA,
test_r2 = NA,
seed = NA,
col_1 = NA,
col_2 = NA
) %>% filter(!is.na(seed))
#pruebo cada forumula
for(formula in formulas){
exp_res = eval_formula(
nombre, formula,
train,
test,
train$y,
test$y
)
exp_res$seed = seed
exp_res$col_1 = x1
exp_res$col_2 = x2
res = rbind(res, exp_res)
}
#devuelvo los resultados
return(res)
}
df = clima_ecobici %>%
mutate(
lluvias_binned = cut(prcp, breaks= c(0,1,20,50,300), labels=c("0","1-20","20-50","50+"), include.lowest=T),
llovio = if_else(prcp > 0, T, F)
)
resultados = data.frame(
nombre_exp = NA,
formula = NA,
train_RMSE = NA,
train_r2 = NA,
test_RMSE = NA,
test_r2 = NA,
seed = NA
) %>% filter(!is.na(seed))
seed_ = 42
resultados = rbind(resultados, probar_experimento(
"Dia laborable Presion",
seed_, "n", "dia_laborable", "pres", df))
resultados = rbind(resultados, probar_experimento(
"Dia laborable pptacion",
seed_, "n", "dia_laborable", "prcp", df))
resultados = rbind(resultados, probar_experimento(
"Dia laborable llueve o no",
seed_, "n", "dia_laborable", "llovio", df))
resultados = rbind(resultados, probar_experimento(
"Dia laborable lluvia binned",
seed_, "n", "dia_laborable", "lluvias_binned", df))
kable(resultados %>% arrange(-test_r2))
